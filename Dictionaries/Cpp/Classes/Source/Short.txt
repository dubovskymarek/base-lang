@@CLASS:

@NAME				:Short
@CLASS_NAME			:short

@METHOD.Construct	:
#if##caller##is not##null##then#
	#caller# = 0
#else if##params##count##is##0##then#
	0
#else#
	#param1#
#end if#
@METHOD.Destruct	:#caller# = 0
@METHOD.=			:#caller# = #param1#
@METHOD.&=			:#caller# &= #param1#
@METHOD.|=			:#caller# |= #param1#
@METHOD.+=			:#caller# += #param1#
@METHOD.-=			:#caller# -= #param1#
@METHOD.*=			:#caller# *= #param1#
@METHOD./=			:#caller# /= #param1#
@METHOD.++			:#caller#++
@METHOD.--			:#caller#--
@METHOD.+			:(#caller# + #param1#)
@METHOD.-			:(#caller# - #param1#)
@METHOD.*			:(#caller# * #param1#)
@METHOD./			:(#caller# / #param1#)
@METHOD.%			:(#caller# % #param1#)
@METHOD.^			:Math.pow(#caller#, #param1#)
@METHOD.==			:(#caller# == #param1#)
@METHOD.!=			:(#caller# != #param1#)
@METHOD.<			:(#caller# < #param1#)
@METHOD.>			:(#caller# > #param1#)
@METHOD.<=			:(#caller# <= #param1#)
@METHOD.>=			:(#caller# >= #param1#)
@METHOD.ToRange		:ToRange(#caller#, #param1#, #param2#)
@METHOD.ToBool		:(bool)(#caller#)
@METHOD.ToByte		:(UCHAR)(#caller#)
@METHOD.ToInt		:(int)(#caller#)
@METHOD.ToFloat		:(float)(#caller#)
@METHOD.ToString	:to_string(#caller#)



