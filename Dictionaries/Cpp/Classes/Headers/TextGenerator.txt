@@CLASS:

@NAME				:GUI.TextGenerator

@CLASS				:
\#pragma once

\#pragma GCC diagnostic ignored "-Wdeprecated"

\#ifndef UCHAR
\#define UCHAR unsigned char
\#endif

\#include <string>
\#include <vector>
\#include <map>

using namespace std;

#used classes#

///Text generator
\#include "#parent path##parent name#.h"\n
\#include "utilities.h"\n

class BtPoint
{
public:
    BtPoint();
    BtPoint(float x, float y);
    BtPoint(float x1, float y1,
            float x2, float y2,
            float x3, float y3);
    virtual ~BtPoint();
    
	BtPoint operator +=(const BtPoint &pt);
	BtPoint operator -=(const BtPoint &pt);
	bool operator==(const BtPoint& pt);
	BtPoint& operator =(const BtPoint &pt);
	void operator /=(const float &t);
	void operator *=(const float &t);
	BtPoint operator -();

	friend BtPoint operator- (const BtPoint &pt1, const BtPoint &pt2);
	friend BtPoint operator+ (const BtPoint &pt1, const BtPoint &pt2);
	friend BtPoint operator* (const BtPoint &pt1, const float &t);
	friend BtPoint operator* (const float &t, const BtPoint &pt1);
	friend BtPoint operator/ (const BtPoint &pt1, const float &t);
	friend BtPoint operator/ (const float &t, const BtPoint &pt1);
	friend float operator* (const BtPoint &pt1, const BtPoint &pt2);	//scalar product

	BtPoint Right();
	BtPoint Left();

    float x;
    float y;

    float x2;
    float y2;

    float x3;
    float y3;

	bool isBezier;
    bool isPolylineEnd;
};


class BezierPolyline
{
public:
    BezierPolyline();
    virtual ~BezierPolyline();

    void Translate(float x, float y);

    vector<BtPoint> points;
};

class PolylinesGenerator
{
public:
    PolylinesGenerator(float sampling);
    virtual ~PolylinesGenerator();
    
    void StartBuilding();

    void MoveTo(float x, float y);
    void LineTo(float x, float y);
    void ClosePolygon();
    void Curve3(float x1, float y1,
                float x2, float y2);
    void Curve4(float x1, float y1,
                float x2, float y2,
                float x3, float y3);
    void Curve4(float x1, float y1,
                float x2, float y2,
                float x3, float y3,
                int count);

    void SetTranslation(float x, float y);
    void SetScaling(float x, float y);
    
    int Count() { return m_counter; }
    BtPoint* GetPolylines() { return m_polylines; }

private:
    void Convert(BtPoint& point);
	float ConvertX(float x);
	float ConvertY(float y);

	int m_counter;
	int m_polylineStart;
    BtPoint* m_polylines;
    BtPoint m_polylineStartPoint;
    
    bool m_counterMode;
    float m_sampling;
    BtPoint m_prevPoint;

    float m_translationX;
    float m_translationY;
    float m_scalingX;
    float m_scalingY;
};


class #class# : public #parent#
{
public:
	#methods#

	#members#
	
    string GetFontsDirectory();

    string m_fontsDirectory;
    string m_fontFamily;
    float m_fontSize;
    float m_sampling;
    void* m_library;
    void* m_ftFace;
	
	static #class#* s_instance;
	static #class#* s_Instance();
};


@METHOD.Construct	:
static map<int, #class#*> s_windows;

#class#();
